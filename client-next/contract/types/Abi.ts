/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AbiInterface extends utils.Interface {
  functions: {
    "myTransactions()": FunctionFragment;
    "transferETH(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "myTransactions" | "transferETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "myTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferETH",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "myTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETH",
    data: BytesLike
  ): Result;

  events: {
    "TransferSuccess(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferSuccess"): EventFragment;
}

export interface TransferSuccessEventObject {
  sender: string;
  receiver: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type TransferSuccessEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TransferSuccessEventObject
>;

export type TransferSuccessEventFilter = TypedEventFilter<TransferSuccessEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    myTransactions(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string, BigNumber] &
          {
            sender: string;
            receiver: string;
            amount: BigNumber;
            message: string;
            datetime: BigNumber;
          }[]
      ]
    >;

    transferETH(
      _receiver: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  myTransactions(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, BigNumber] &
      {
        sender: string;
        receiver: string;
        amount: BigNumber;
        message: string;
        datetime: BigNumber;
      }[]
  >;

  transferETH(
    _receiver: PromiseOrValue<string>,
    _message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    myTransactions(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber] &
        {
          sender: string;
          receiver: string;
          amount: BigNumber;
          message: string;
          datetime: BigNumber;
        }[]
    >;

    transferETH(
      _receiver: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransferSuccess(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): TransferSuccessEventFilter;
    TransferSuccess(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): TransferSuccessEventFilter;
  };

  estimateGas: {
    myTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(
      _receiver: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    myTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferETH(
      _receiver: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
